package UserCode.Misc;



import static org.junit.Assert.*;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

/**
 * The test class RandomNumberTest.
 *
 * @author  Chris Williams
 * @version 3.0
 * 
 * Test Conditions:
 *
 * 1) generateNumber(): check if the method returns values between the params passed
 * 
 */
public class RandomNumberTest
{
    /**
     * Default constructor for test class RandomNumberTest
     */
    public RandomNumberTest()
    {
    }

    /**
     * Sets up the test fixture.
     *
     * Called before every test case method.
     */
    @Before
    public void setUp()
    {
    }

    /**
     * Tears down the test fixture.
     *
     * Called after every test case method.
     */
    @After
    public void tearDown()
    {
    }
    
    /**
     * 
     * METHOD: Test condition 1:
     * Throws an error if the double value returned from the generateNumber() method isn't between the params passed
     * 
     */
    @Test
    public void testCondition1()
    {
        // INITIALISE and assign a boolean to hold the result of the test, call it 'pass':
        boolean pass = false;
        
        // INITIALISE and assign an instance of IRandomNumber and get its instance:
        IRandomNumber _rand = RandomNumber.INSTANCE;
        
        // Minimum value passed to the generateNumber method:
        double min = 0.005;

        // Maximum value passed to the generateNumber method:
        double max = 0.05;
        
        // Store the number returned from the call to generateNumber, call it 'rtnNum':
        double rtnNum;

        // START a loop to call the generateNumber method 1000 times
        for (int i = 1; i < 1001; i++)
        {
            // Store the number generated by calling the generate number method with the param's set above
            rtnNum = _rand.generateNumber(min, max);

            // If the number returned is less than or equal to the minimum value set, or greater than or equal to the minimum value set, the test has failed
            if (rtnNum <= min || rtnNum >= max) 
            {
                // Test failed
                pass = false;

                return;
            }
            else
            {
                pass = true;
            }
        }

        if (!pass)
        {
            fail("The numbers generated exceeded the values passed");
        }
    }
}
