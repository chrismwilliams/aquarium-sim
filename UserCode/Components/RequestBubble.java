package UserCode.Components;

import UserCode.Behaviours.IObservable;
import UserCode.Behaviours.IObserver;
import UserCode.Behaviours.IBehaviour;
import UserCode.Behaviours.IIntervalRequest;
import UserCode.Behaviours.setInterval;

/**
 * RequestBubble describes the behaviour of an IComponent that is used by a pet that requires to emmit a bubble. This IComponent
 * requires an IObserver which will be informed once a request is made. This is achieve by using the IIntervalRequest class
 * 
 * @author Chris Williams 
 * @version 3.0
 */
public class RequestBubble implements IObservable, IComponent
{
    // INITIALISE and assign a String for the name of the IComponent, call it '_name':
    private String _name = "requestbubble";

    // DECLARE an IObserver field to store a reference to the IObserver, call it '_observer':
    private IObserver _observer;

    // DECLARE an IBehaviour field to store a reference to the IBehaviour, call it '_behaviour':
    private IBehaviour _behaviour;

    // DECLARE an IIntervalRequest field to store the reference to the IntervaleRequest class, call it '_intervalRequest':
    private IIntervalRequest _intervalRequest;
    
    /**
     * Constructor for objects of class RequestBubble
     * 
     */
    public RequestBubble()
    {
        // ALL fields assigned in the Initialise method:  
    }

    /**
     * 
     * METHOD: used to initialise the _intervalRequest field and the _behaviour field. The method calls 
     * the generateRequest() method to start the setInterval
     * 
     * @param   _b  the IBehaviour class that this IComponent uses to request a bubble at its current location
     * 
     */
    public void Initialise(IBehaviour _b)
    {
        // INITIALISE the _behaviour field with the param passed:
        _behaviour = _b;

        // INITIALISE the _intervalRequest with a new RandomIntervalRequest class:
        _intervalRequest = new setInterval(this);

        // CALL the generateRequest() method to start the IntervalRequest:
        _intervalRequest.generateRequest();
    }

    /**
     * GETTER
     * METHOD: used to return the name of the IComponent held in the _name field set
     * 
     * @return  the String value held in the _name field
     * 
     */
    public String getName()
    {
        // RETURN the _name field to caller:
        return _name;
    }

    /**
     * 
     * METHOD: used to stop any operations that are running and inform the IObserver to stop observing this class
     * 
     */
    public void TearDown()
    {
        // CALL the stopRequest() method on the IIntervalRequest class to stop generating a request
        _intervalRequest.stopRequest();
        
        // SET the _intervalRequest field to null;
        _intervalRequest = null;

        // CALL the endObserving method of the IObserver and pass a reference to this
        _observer.endObserving(this);
        
        // CALL the removeObserver method to end observing:
        removeObserver(_observer);
    }

    /**
     * 
     * METHOD: used indirectly by the IIntervalRequest class when a request has been generated by calling the componentAction method
     * This method calls the notfiyObservers method to inform the IObserver of an event, requesting a bubble.
     * 
     */
    private void requestMade()
    {
        // CALL the notifyObserver method to notify of an event:
        notifyObservers();

    }

    /**
     * 
     * METHOD: used to add the IObserver to the _observer field which is the class that will be notified when an event is triggered
     * 
     */
    public void addObserver(IObserver _o)
    {        
        // ASSIGN the IObserver to the _observer field:
        _observer = _o;
    }

    /**
     * 
     * METHOD: used to assign the IObserver field to null and will no longer by 'notified' if an event occurs
     * 
     */
    public void removeObserver(IObserver _o)
    {
        // ASSIGN the IObserver field _observer to null:
        _observer = null;
    }
    
    /**
     * @Deprecated
     * METHOD: used for testing to return the _observer field
     * 
     * @return  an IObserver class within the _observer field
     * 
     */
    @Deprecated
    public IObserver getObserver()
    {
        return _observer;
    }
    
    /**
     * 
     * METHOD: used to notify the IObserver that an event occurred. This method first checks if the _observer field
     * has been assigned
     * 
     */
    public void notifyObservers()
    {
        // CHECK if the IObserver _observer field is set to null:
        if (_observer != null)  
        {
            // IF it's not null, call the update method of the IObserver:
            _observer.update(this);
        }
    }
    
    /**
     * 
     * METHOD: used by the IObserver to return a double of where the current position of the IBehaviour is and where to place the bubble
     * 
     * @return  an array of doubles containing the x,y and z position of the IBehaviour held in the _behaviour class
     * 
     */
    public double[] getUpdate()
    {
        // RETURN the result of calling the getPosition() method:
        return _behaviour.getPosition();
    }
    
    /**
     * 
     * METHOD used to call the unique method this component adds to an IBehaviour. This method is called by the IIntervaleRequest every
     * few seconds which will then notify any IObserver's
     * 
     */
    public void componentAction()
    {
        // CALL the unique method for this component requestMade();
        requestMade();
    }

    /**
     * 
     * METHOD: this method isn't required by this IComponent as it uses the IRequestInterval class to generate all 
     * internal operations and request a bubble
     *  
     */
    public void update()
    {
        // NO update required:
    }

}
